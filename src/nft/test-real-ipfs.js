// Test du vrai service IPFS
// Ex√©cutez avec: node src/nft/test-real-ipfs.js

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

const API_BASE_URL = 'http://localhost:3000';

async function testRealIpfs() {
  try {
    console.log('üß™ Test du vrai service IPFS...\n');

    // 1. V√©rifier la connectivit√© IPFS
    console.log('1. V√©rification de la connectivit√© IPFS...');
    try {
      const healthResponse = await axios.get(`${API_BASE_URL}/nft/ipfs/health`);
      console.log('‚úÖ Connectivit√© IPFS:', healthResponse.data);
    } catch (error) {
      console.log('‚ùå Erreur connectivit√© IPFS:', error.response?.data || error.message);
    }
    console.log('');

    // 2. Cr√©er une vraie image PNG
    console.log('2. Cr√©ation d\'une vraie image PNG...');
    const pngData = Buffer.from(
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==',
      'base64'
    );
    console.log(`   Taille de l'image: ${pngData.length} bytes`);
    console.log('');

    // 3. Upload de l'image vers IPFS
    console.log('3. Upload de l\'image vers IPFS...');
    const formData = new FormData();
    formData.append('image', pngData, {
      filename: 'test-real-image.png',
      contentType: 'image/png'
    });

    const uploadResponse = await axios.post(
      `${API_BASE_URL}/nft/upload/ipfs`,
      formData,
      {
        headers: formData.getHeaders(),
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      }
    );

    console.log('‚úÖ Image upload√©e:');
    console.log(`   CID: ${uploadResponse.data.cid}`);
    console.log(`   Taille: ${uploadResponse.data.size} bytes`);
    console.log(`   URL IPFS: https://ipfs.io/ipfs/${uploadResponse.data.cid}`);
    console.log('');

    // 4. Test de l'URL IPFS
    console.log('4. Test de l\'URL IPFS...');
    const ipfsUrl = `https://ipfs.io/ipfs/${uploadResponse.data.cid}`;
    console.log(`   Test de: ${ipfsUrl}`);
    
    try {
      const testResponse = await axios.get(ipfsUrl, { timeout: 10000 });
      console.log('‚úÖ URL IPFS accessible !');
      console.log(`   Taille re√ßue: ${testResponse.data.length} bytes`);
      console.log(`   Type: ${testResponse.headers['content-type'] || 'inconnu'}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  URL IPFS non accessible (normal si IPFS local)');
      console.log(`   Erreur: ${error.message}`);
    }
    console.log('');

    // 5. Mint NFT avec cette image
    console.log('5. Mint NFT avec cette image...');
    const mintFormData = new FormData();
    mintFormData.append('image', pngData, {
      filename: 'real-nft-test.png',
      contentType: 'image/png'
    });
    mintFormData.append('name', 'NFT avec Vraie Image IPFS');
    mintFormData.append('description', 'Un NFT utilisant de vraies images IPFS');
    mintFormData.append('attributes', JSON.stringify({
      type: 'real_ipfs',
      rarity: 'epic',
      test: true,
      ipfs_connected: true
    }));

    const mintResponse = await axios.post(
      `${API_BASE_URL}/nft/mint/with-image`,
      mintFormData,
      {
        headers: mintFormData.getHeaders(),
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
      }
    );

    console.log('‚úÖ NFT mint√© avec succ√®s !');
    console.log(`   NFT ID: ${mintResponse.data.nftId}`);
    console.log(`   Image CID: ${mintResponse.data.imageCid}`);
    console.log(`   M√©tadonn√©es CID: ${mintResponse.data.metadataCid}`);
    console.log('');

    // 6. R√©cup√©rer les m√©tadonn√©es
    console.log('6. R√©cup√©ration des m√©tadonn√©es...');
    try {
      const metadataResponse = await axios.get(`${API_BASE_URL}/nft/metadata/${mintResponse.data.nftId}`);
      console.log('‚úÖ M√©tadonn√©es r√©cup√©r√©es:');
      console.log(JSON.stringify(metadataResponse.data, null, 2));
    } catch (error) {
      console.log('‚ö†Ô∏è  M√©tadonn√©es non disponibles:', error.response?.data?.message || error.message);
    }
    console.log('');

    // 7. Test de l'image finale
    console.log('7. Test de l\'image finale...');
    const finalImageUrl = `https://ipfs.io/ipfs/${mintResponse.data.imageCid}`;
    console.log(`   URL finale: ${finalImageUrl}`);
    
    try {
      const finalTestResponse = await axios.get(finalImageUrl, { timeout: 10000 });
      console.log('‚úÖ Image finale accessible !');
      console.log(`   Taille: ${finalTestResponse.data.length} bytes`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Image finale non accessible');
      console.log(`   Erreur: ${error.message}`);
    }

    console.log('');
    console.log('üéâ Test termin√© !');
    console.log('');
    console.log('üìã R√©sum√©:');
    console.log(`   - NFT ID: ${mintResponse.data.nftId}`);
    console.log(`   - Image: ${finalImageUrl}`);
    console.log(`   - HashScan: https://hashscan.io/testnet/token/${mintResponse.data.tokenId}`);

  } catch (error) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('D√©tails:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testRealIpfs();


